{"version":3,"file":"icons-62748971.js","sources":["../../node_modules/@turf/helpers/main.es.js","../../node_modules/@turf/invariant/main.es.js","../../node_modules/@turf/bearing/main.es.js","../../node_modules/@turf/destination/main.es.js","../../node_modules/@turf/distance/main.es.js","../../node_modules/@turf/midpoint/main.es.js","../../src/app/map/utils.js","../../src/app/map/layers/suggestions-layer.js","../../src/app/search/elements/search-result.js","../../src/app/itinerary/actions.js","../../src/app/itinerary/reducer.js","../../src/app/search/reducers.js","../../src/conf/mapbox.js","../../src/app/map/reducer.js","../../src/app/common/elements/icons.js"],"sourcesContent":["/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n */\nvar earthRadius = 6371008.8;\n\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n */\nvar factors = {\n    meters: earthRadius,\n    metres: earthRadius,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    miles: earthRadius / 1609.344,\n    nauticalmiles: earthRadius / 1852,\n    inches: earthRadius * 39.370,\n    yards: earthRadius / 1.0936,\n    feet: earthRadius * 3.28084,\n    radians: 1,\n    degrees: earthRadius / 111325,\n};\n\n/**\n * Units of measurement factors based on 1 meter.\n */\nvar unitsFactors = {\n    meters: 1,\n    metres: 1,\n    millimeters: 1000,\n    millimetres: 1000,\n    centimeters: 100,\n    centimetres: 100,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    miles: 1 / 1609.344,\n    nauticalmiles: 1 / 1852,\n    inches: 39.370,\n    yards: 1 / 1.0936,\n    feet: 3.28084,\n    radians: 1 / earthRadius,\n    degrees: 1 / 111325,\n};\n\n/**\n * Area of measurement factors based on 1 square meter.\n */\nvar areaFactors = {\n    meters: 1,\n    metres: 1,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    centimeters: 10000,\n    centimetres: 10000,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    acres: 0.000247105,\n    miles: 3.86e-7,\n    yards: 1.195990046,\n    feet: 10.763910417,\n    inches: 1550.003100006\n};\n\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geometry, properties, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var id = options.id;\n\n    // Validation\n    if (geometry === undefined) throw new Error('geometry is required');\n    if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');\n    if (bbox) validateBBox(bbox);\n    if (id) validateId(id);\n\n    // Main\n    var feat = {type: 'Feature'};\n    if (id) feat.id = id;\n    if (bbox) feat.bbox = bbox;\n    feat.properties = properties || {};\n    feat.geometry = geometry;\n    return feat;\n}\n\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<number>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Geometry\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = 'Point';\n * var coordinates = [110, 50];\n *\n * var geometry = turf.geometry(type, coordinates);\n *\n * //=geometry\n */\nfunction geometry(type, coordinates, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n\n    // Validation\n    if (!type) throw new Error('type is required');\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n    if (bbox) validateBBox(bbox);\n\n    // Main\n    var geom;\n    switch (type) {\n    case 'Point': geom = point(coordinates).geometry; break;\n    case 'LineString': geom = lineString(coordinates).geometry; break;\n    case 'Polygon': geom = polygon(coordinates).geometry; break;\n    case 'MultiPoint': geom = multiPoint(coordinates).geometry; break;\n    case 'MultiLineString': geom = multiLineString(coordinates).geometry; break;\n    case 'MultiPolygon': geom = multiPolygon(coordinates).geometry; break;\n    default: throw new Error(type + ' is invalid');\n    }\n    if (bbox) geom.bbox = bbox;\n    return geom;\n}\n\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n    if (coordinates.length < 2) throw new Error('coordinates must be at least 2 numbers long');\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) throw new Error('coordinates must contain numbers');\n\n    return feature({\n        type: 'Point',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    for (var i = 0; i < coordinates.length; i++) {\n        var ring = coordinates[i];\n        if (ring.length < 4) {\n            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (i === 0 && j === 0 && !isNumber(ring[0][0]) || !isNumber(ring[0][1])) throw new Error('coordinates must contain numbers');\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error('First and last Position are not equivalent.');\n            }\n        }\n    }\n\n    return feature({\n        type: 'Polygon',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (coordinates.length < 2) throw new Error('coordinates must be an array of two or more positions');\n    // Check if first point of LineString contains two numbers\n    if (!isNumber(coordinates[0][1]) || !isNumber(coordinates[0][1])) throw new Error('coordinates must contain numbers');\n\n    return feature({\n        type: 'LineString',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<number>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var id = options.id;\n\n    // Validation\n    if (!features) throw new Error('No features passed');\n    if (!Array.isArray(features)) throw new Error('features must be an Array');\n    if (bbox) validateBBox(bbox);\n    if (id) validateId(id);\n\n    // Main\n    var fc = {type: 'FeatureCollection'};\n    if (id) fc.id = id;\n    if (bbox) fc.bbox = bbox;\n    fc.features = features;\n    return fc;\n}\n\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiLineString',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiPoint',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiPolygon',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = {\n *     \"type\": \"Point\",\n *       \"coordinates\": [100, 0]\n *     };\n * var line = {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [ [101, 0], [102, 1] ]\n *   };\n * var collection = turf.geometryCollection([pt, line]);\n *\n * //=collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (!geometries) throw new Error('geometries is required');\n    if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');\n\n    return feature({\n        type: 'GeometryCollection',\n        geometries: geometries\n    }, properties, options);\n}\n\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');\n    if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (radians === undefined || radians === null) throw new Error('radians is required');\n\n    if (units && typeof units !== 'string') throw new Error('units must be a string');\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error(units + ' units is invalid');\n    return radians * factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (distance === undefined || distance === null) throw new Error('distance is required');\n\n    if (units && typeof units !== 'string') throw new Error('units must be a string');\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error(units + ' units is invalid');\n    return distance / factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    if (bearing === null || bearing === undefined) throw new Error('bearing is required');\n\n    var angle = bearing % 360;\n    if (angle < 0) angle += 360;\n    return angle;\n}\n\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    if (radians === null || radians === undefined) throw new Error('radians is required');\n\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\n\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    if (degrees === null || degrees === undefined) throw new Error('degrees is required');\n\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\n\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {string} originalUnit of the length\n * @param {string} [finalUnit='kilometers'] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (length === null || length === undefined) throw new Error('length is required');\n    if (!(length >= 0)) throw new Error('length must be a positive number');\n\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit || 'kilometers');\n}\n\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {string} [originalUnit='meters'] of the distance\n * @param {string} [finalUnit='kilometers'] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (area === null || area === undefined) throw new Error('area is required');\n    if (!(area >= 0)) throw new Error('area must be a positive number');\n\n    var startFactor = areaFactors[originalUnit || 'meters'];\n    if (!startFactor) throw new Error('invalid original units');\n\n    var finalFactor = areaFactors[finalUnit || 'kilometers'];\n    if (!finalFactor) throw new Error('invalid final units');\n\n    return (area / startFactor) * finalFactor;\n}\n\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\n\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) throw new Error('bbox is required');\n    if (!Array.isArray(bbox)) throw new Error('bbox must be an Array');\n    if (bbox.length !== 4 && bbox.length !== 6) throw new Error('bbox must be an Array of 4 or 6 numbers');\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) throw new Error('bbox must only contain numbers');\n    });\n}\n\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) throw new Error('id is required');\n    if (['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\n}\n\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error('method has been renamed to `radiansToDegrees`');\n}\n\nfunction degrees2radians() {\n    throw new Error('method has been renamed to `degreesToRadians`');\n}\n\nfunction distanceToDegrees() {\n    throw new Error('method has been renamed to `lengthToDegrees`');\n}\n\nfunction distanceToRadians() {\n    throw new Error('method has been renamed to `lengthToRadians`');\n}\n\nfunction radiansToDistance() {\n    throw new Error('method has been renamed to `radiansToLength`');\n}\n\nfunction bearingToAngle() {\n    throw new Error('method has been renamed to `bearingToAzimuth`');\n}\n\nfunction convertDistance() {\n    throw new Error('method has been renamed to `convertLength`');\n}\n\nexport { earthRadius, factors, unitsFactors, areaFactors, feature, geometry, point, points, polygon, polygons, lineString, lineStrings, featureCollection, multiLineString, multiPoint, multiPolygon, geometryCollection, round, radiansToLength, lengthToRadians, lengthToDegrees, bearingToAzimuth, radiansToDegrees, degreesToRadians, convertLength, convertArea, isNumber, isObject, validateBBox, validateId, radians2degrees, degrees2radians, distanceToDegrees, distanceToRadians, radiansToDistance, bearingToAngle, convertDistance };\n","import { isNumber } from '@turf/helpers';\n\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nfunction getCoord(coord) {\n    if (!coord) throw new Error('coord is required');\n    if (coord.type === 'Feature' && coord.geometry !== null && coord.geometry.type === 'Point') return coord.geometry.coordinates;\n    if (coord.type === 'Point') return coord.coordinates;\n    if (Array.isArray(coord) && coord.length >= 2 && coord[0].length === undefined && coord[1].length === undefined) return coord;\n\n    throw new Error('coord must be GeoJSON Point or an Array of numbers');\n}\n\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nfunction getCoords(coords) {\n    if (!coords) throw new Error('coords is required');\n\n    // Feature\n    if (coords.type === 'Feature' && coords.geometry !== null) return coords.geometry.coordinates;\n\n    // Geometry\n    if (coords.coordinates) return coords.coordinates;\n\n    // Array of numbers\n    if (Array.isArray(coords)) return coords;\n\n    throw new Error('coords must be GeoJSON Feature, Geometry Object or an Array');\n}\n\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nfunction containsNumber(coordinates) {\n    if (coordinates.length > 1 && isNumber(coordinates[0]) && isNumber(coordinates[1])) {\n        return true;\n    }\n\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error('coordinates must only contain numbers');\n}\n\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value, type, name) {\n    if (!type || !name) throw new Error('type and name required');\n\n    if (!value || value.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + value.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature, type, name) {\n    if (!feature) throw new Error('No feature passed');\n    if (!name) throw new Error('.featureOf() requires a name');\n    if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n        throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(featureCollection, type, name) {\n    if (!featureCollection) throw new Error('No featureCollection passed');\n    if (!name) throw new Error('.collectionOf() requires a name');\n    if (!featureCollection || featureCollection.type !== 'FeatureCollection') {\n        throw new Error('Invalid input to ' + name + ', FeatureCollection required');\n    }\n    for (var i = 0; i < featureCollection.features.length; i++) {\n        var feature = featureCollection.features[i];\n        if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n            throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n        }\n    }\n}\n\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nfunction getGeom(geojson) {\n    if (!geojson) throw new Error('geojson is required');\n    if (geojson.geometry !== undefined) return geojson.geometry;\n    if (geojson.coordinates || geojson.geometries) return geojson;\n    throw new Error('geojson must be a valid Feature or Geometry Object');\n}\n\n/**\n * Get Geometry Type from Feature or Geometry Object\n *\n * @throws {Error} **DEPRECATED** in v5.0.0 in favor of getType\n */\nfunction getGeomType() {\n    throw new Error('invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType');\n}\n\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nfunction getType(geojson, name) {\n    if (!geojson) throw new Error((name || 'geojson') + ' is required');\n    // GeoJSON Feature & GeometryCollection\n    if (geojson.geometry && geojson.geometry.type) return geojson.geometry.type;\n    // GeoJSON Geometry & FeatureCollection\n    if (geojson.type) return geojson.type;\n    throw new Error((name || 'geojson') + ' is invalid');\n}\n\nexport { getCoord, getCoords, containsNumber, geojsonType, featureOf, collectionOf, getGeom, getGeomType, getType };\n","import { getCoord } from '@turf/invariant';\nimport { degreesToRadians, isObject, radiansToDegrees } from '@turf/helpers';\n\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Takes two {@link Point|points} and finds the geographic bearing between them,\n * i.e. the angle measured in degrees from the north line (0 degrees)\n *\n * @name bearing\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.final=false] calculates the final bearing if true\n * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)\n * @example\n * var point1 = turf.point([-75.343, 39.984]);\n * var point2 = turf.point([-75.534, 39.123]);\n *\n * var bearing = turf.bearing(point1, point2);\n *\n * //addToMap\n * var addToMap = [point1, point2]\n * point1.properties['marker-color'] = '#f00'\n * point2.properties['marker-color'] = '#0f0'\n * point1.properties.bearing = bearing\n */\nfunction bearing(start, end, options) {\n    // Optional parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var final = options.final;\n\n    // Reverse calculation\n    if (final === true) return calculateFinalBearing(start, end);\n\n    var coordinates1 = getCoord(start);\n    var coordinates2 = getCoord(end);\n\n    var lon1 = degreesToRadians(coordinates1[0]);\n    var lon2 = degreesToRadians(coordinates2[0]);\n    var lat1 = degreesToRadians(coordinates1[1]);\n    var lat2 = degreesToRadians(coordinates2[1]);\n    var a = Math.sin(lon2 - lon1) * Math.cos(lat2);\n    var b = Math.cos(lat1) * Math.sin(lat2) -\n        Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n\n    return radiansToDegrees(Math.atan2(a, b));\n}\n\n/**\n * Calculates Final Bearing\n *\n * @private\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @returns {number} bearing\n */\nfunction calculateFinalBearing(start, end) {\n    // Swap start & end\n    var bear = bearing(end, start);\n    bear = (bear + 180) % 360;\n    return bear;\n}\n\nexport default bearing;\n","import { getCoord } from '@turf/invariant';\nimport { degreesToRadians, isObject, lengthToRadians, point, radiansToDegrees } from '@turf/helpers';\n\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Takes a {@link Point} and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name destination\n * @param {Coord} origin starting point\n * @param {number} distance distance from the origin point\n * @param {number} bearing ranging from -180 to 180\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @param {Object} [options.properties={}] Translate properties to Point\n * @returns {Feature<Point>} destination point\n * @example\n * var point = turf.point([-75.343, 39.984]);\n * var distance = 50;\n * var bearing = 90;\n * var options = {units: 'miles'};\n *\n * var destination = turf.destination(point, distance, bearing, options);\n *\n * //addToMap\n * var addToMap = [point, destination]\n * destination.properties['marker-color'] = '#f00';\n * point.properties['marker-color'] = '#0f0';\n */\nfunction destination(origin, distance, bearing, options) {\n    // Optional parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var units = options.units;\n    var properties = options.properties;\n\n    // Handle input\n    var coordinates1 = getCoord(origin);\n    var longitude1 = degreesToRadians(coordinates1[0]);\n    var latitude1 = degreesToRadians(coordinates1[1]);\n    var bearing_rad = degreesToRadians(bearing);\n    var radians = lengthToRadians(distance, units);\n\n    // Main\n    var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) +\n        Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearing_rad));\n    var longitude2 = longitude1 + Math.atan2(Math.sin(bearing_rad) * Math.sin(radians) * Math.cos(latitude1),\n        Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));\n    var lng = radiansToDegrees(longitude2);\n    var lat = radiansToDegrees(latitude2);\n\n    return point([lng, lat], properties);\n}\n\nexport default destination;\n","import { getCoord } from '@turf/invariant';\nimport { degreesToRadians, isObject, radiansToLength } from '@turf/helpers';\n\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Calculates the distance between two {@link Point|points} in degrees, radians,\n * miles, or kilometers. This uses the\n * [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula)\n * to account for global curvature.\n *\n * @name distance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(from, to, options) {\n    // Optional parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var units = options.units;\n\n    var coordinates1 = getCoord(from);\n    var coordinates2 = getCoord(to);\n    var dLat = degreesToRadians((coordinates2[1] - coordinates1[1]));\n    var dLon = degreesToRadians((coordinates2[0] - coordinates1[0]));\n    var lat1 = degreesToRadians(coordinates1[1]);\n    var lat2 = degreesToRadians(coordinates2[1]);\n\n    var a = Math.pow(Math.sin(dLat / 2), 2) +\n          Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n\n    return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), units);\n}\n\nexport default distance;\n","import bearing from '@turf/bearing';\nimport destination from '@turf/destination';\nimport distance from '@turf/distance';\n\n/**\n * Takes two {@link Point|points} and returns a point midway between them.\n * The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account.\n *\n * @name midpoint\n * @param {Coord} point1 first point\n * @param {Coord} point2 second point\n * @returns {Feature<Point>} a point midway between `pt1` and `pt2`\n * @example\n * var point1 = turf.point([144.834823, -37.771257]);\n * var point2 = turf.point([145.14244, -37.830937]);\n *\n * var midpoint = turf.midpoint(point1, point2);\n *\n * //addToMap\n * var addToMap = [point1, point2, midpoint];\n * midpoint.properties['marker-color'] = '#f00';\n */\nfunction midpoint(point1, point2) {\n    var dist = distance(point1, point2);\n    var heading = bearing(point1, point2);\n    var midpoint = destination(point1, dist / 2, heading);\n\n    return midpoint;\n}\n\nexport default midpoint;\n","export const EMPTY_SOURCE = Object.freeze({\n    type: 'geojson',\n    data: {\n        type: 'FeatureCollection',\n        features: []\n    }\n});\nexport const eventuallyUpdate = map => (layer, slicer, updateFunction) => {\n    let currentState = null;\n    return (state) => {\n        let updated = false;\n        const newState = slicer(state);\n        if (currentState !== newState) {\n            map.getSource(layer).setData(updateFunction(newState));\n            updated = true;\n        }\n        currentState = newState;\n        return updated;\n    };\n};\nexport const pointListToFeature = (points) => ({\n    type: 'FeatureCollection',\n    features: points.map(pointToFeature)\n});\nconst pointToFeature = (point) => ({\n    type: 'Feature',\n    geometry: {\n        type: 'Point',\n        coordinates: [point.lng, point.lat]\n    }\n});\n","import { EMPTY_SOURCE } from '../utils';\nimport { decodeLine } from '../../utils';\nimport { createSearchResultInstance } from '../../search/elements/search-result';\nexport const sourceId = 'suggestions';\nexport const lineStyle = {\n    id: 'suggestions-line',\n    type: 'line',\n    source: sourceId,\n    paint: {\n        'line-color': ['case', ['get', 'selected'], '#55b2ff', '#ff426f'],\n        'line-opacity': 0.7,\n        'line-gap-width': ['case', ['get', 'selected'], 4, 1],\n        'line-width': ['case', ['get', 'selected'], 7, 5]\n    }\n};\nexport const pointStyle = {\n    id: 'suggestions-point',\n    type: 'circle',\n    source: sourceId,\n    paint: {\n        'circle-color': '#55b2ff',\n        'circle-radius': 12,\n        'circle-stroke-width': ['case', ['get', 'selected'], 4, 2],\n        'circle-stroke-color': ['case', ['get', 'selected'], '#55b2ff', '#ff426f'],\n        'circle-opacity': 0.2\n    },\n    filter: ['==', '$type', 'Point']\n};\nexport const slicer = (state) => state.search;\nexport const decodeLineString = geometry => {\n    const output = Object.assign({}, geometry);\n    output.coordinates = decodeLine(geometry.coordinates);\n    return output;\n};\nconst pointFeatureFactory = (selectedItem) => (item, index) => ({\n    type: 'Feature',\n    geometry: createSearchResultInstance(item).toGeoFeature(),\n    properties: {\n        selected: item === selectedItem,\n        index\n    }\n});\nexport const getLayerData = (data) => {\n    if (data.searchResult.length === 0 && data.selectedSearchResult === null) {\n        return EMPTY_SOURCE.data;\n    }\n    const pointFactory = pointFeatureFactory(data.selectedSearchResult);\n    const geoJSON = {\n        type: 'FeatureCollection',\n        features: data.searchResult\n            .map(pointFactory)\n    };\n    if (data.selectedSearchResult && geoJSON.features.every(f => f.properties.selected === false)) {\n        geoJSON.features.push(pointFactory(data.selectedSearchResult));\n    }\n    return geoJSON;\n};\n","import { decodeLine, truncate } from '../../utils';\nimport { html } from 'lit-html';\nimport midpoint from '@turf/midpoint';\nimport { decodeLineString } from '../../map/layers/suggestions-layer';\n// todo better composition\nexport const fromLine = (item) => ({\n    toPoint() {\n        const line = decodeLine(item.geometry.coordinates);\n        const points = [line[0], line[line.length - 1]]\n            .map(p => p.reverse());\n        const center = midpoint(points[0], points[1])\n            .geometry\n            .coordinates;\n        return {\n            lng: center[1],\n            lat: center[0]\n        };\n    },\n    toGeoFeature() {\n        return decodeLineString(item.geometry);\n    }\n});\nconst createCornerSearchResult = (item) => {\n    return {\n        toOptionElement() {\n            return html `esquina entre <strong>${item.streets[0]}</strong> y <strong>${item.streets[1]}</strong>,<em class=\"municipality\">${item.municipality}</em>`;\n        },\n        toDetailElement() {\n            return html `\n<citykleta-location .location=${item}>\n    <span slot=\"title\">${item.streets[0] + ' y ' + item.streets[1]}</span>\n</citykleta-location>`;\n        },\n        toPoint() {\n            return {\n                lng: item.geometry.coordinates[0],\n                lat: item.geometry.coordinates[1]\n            };\n        },\n        toGeoFeature() {\n            return item.geometry;\n        },\n        toString() {\n            return `esquina ${item.streets[0]} y ${item.streets[1]}, ${item.municipality}`;\n        }\n    };\n};\nconst createBlockSearchResult = (item) => {\n    return Object.assign(fromLine(item), {\n        toOptionElement() {\n            return html `<strong>${item.name}</strong> entre <strong>${item.intersections[0].name}</strong> y <strong>${item.intersections[1].name}</strong>,<em class=\"municipality\">${item.municipality}</em>`;\n        },\n        toDetailElement() {\n            return html `\n<citykleta-location .location=${item}>\n    <span slot=\"title\">Cuadra en ${item.name}</span>\n</citykleta-location>`;\n        },\n        toString() {\n            return `${item.name} e/ ${item.intersections[0].name} y ${item.intersections[1].name}, ${item.municipality}`;\n        }\n    });\n};\nconst createStreetSearchResult = (item) => {\n    return Object.assign(fromLine(item), {\n        toOptionElement() {\n            return html `<strong>${item.name}</strong>,<em class=\"municipality\">${item.municipality}</em>`;\n        },\n        toDetailElement() {\n            return html `\n<citykleta-location .location=${item}></citykleta-location>`;\n        },\n        toString() {\n            return `${item.name}, ${item.municipality}`;\n        }\n    });\n};\nconst createPointOfInterestSearchResult = (item) => {\n    return {\n        toOptionElement() {\n            return html `${item.name},<em class=\"municipality\">${item.municipality}</em>`;\n        },\n        toDetailElement() {\n            const { address = {} } = item;\n            const addressPart = [\n                address.street,\n                address.number ? `#${address.number}` : ''\n            ]\n                .filter(Boolean)\n                .join(' ');\n            return html `\n<citykleta-location .location=${item}>\n    <div slot=\"address\">${html `${addressPart ? addressPart + ', ' : ''}<em>${item.municipality}</em>`}</div>\n</citykleta-location>`;\n        },\n        toPoint() {\n            const [lng, lat] = item.geometry.coordinates;\n            return {\n                lng,\n                lat\n            };\n        },\n        toString() {\n            return `${item.name}, ${item.municipality}`;\n        },\n        toGeoFeature() {\n            return item.geometry;\n        }\n    };\n};\nconst createLnLatSearchResult = (item) => {\n    return {\n        toOptionElement() {\n            return html `Pointed location <at></at><em class=\"municipality\">${truncate(item.lng)}, ${truncate(item.lat)}</em>`;\n        },\n        toDetailElement() {\n            return html `\n<citykleta-location .location=${item}>\n    <span slot=\"title\">Unknown place</span>\n</citykleta-location>`;\n        },\n        toPoint() {\n            return {\n                lng: item.lng,\n                lat: item.lat\n            };\n        },\n        toString() {\n            return `Pointed location at ${truncate(item.lng)},${truncate(item.lat)}`;\n        },\n        toGeoFeature() {\n            return {\n                type: 'Point',\n                coordinates: [item.lng, item.lat]\n            };\n        }\n    };\n};\nexport const createSearchResultInstance = (item) => {\n    switch (item.type) {\n        case 'corner':\n            return createCornerSearchResult(item);\n        case 'street_block':\n            return createBlockSearchResult(item);\n        case 'street':\n            return createStreetSearchResult(item);\n        case 'point_of_interest':\n            return createPointOfInterestSearchResult(item);\n        case 'lng_lat':\n            return createLnLatSearchResult(item);\n        default:\n            throw new Error(`unknown search result type \"${item.type}\"`);\n    }\n};\n","import { ActionType } from '../common/actions';\nimport { createSearchResultInstance } from '../search/elements/search-result';\nconst hasValue = p => p.item !== null;\nexport const addItineraryPoint = (point, beforeId = null) => ({\n    type: ActionType.ADD_ITINERARY_POINT,\n    point,\n    beforeId\n});\nexport const removeItineraryPoint = (id) => ({\n    type: ActionType.REMOVE_ITINERARY_POINT,\n    id\n});\nexport const updateItineraryPoint = (id, location) => ({\n    type: ActionType.UPDATE_ITINERARY_POINT,\n    id,\n    location\n});\nexport const goTo = (location) => ({\n    type: ActionType.GO_TO,\n    location\n});\nexport const goFrom = (location) => ({\n    type: ActionType.GO_FROM,\n    location\n});\nexport const fetchRoutes = () => ({\n    type: ActionType.FETCH_ROUTES\n});\nexport const fetchRoutesWithSuccess = (routes) => ({\n    type: ActionType.FETCH_ROUTES_SUCCESS,\n    routes\n});\nexport const selectRoute = (route) => ({\n    type: ActionType.SELECT_ROUTE,\n    route\n});\nexport const fetchRoutesWithFailure = (error) => ({\n    type: ActionType.FETCH_ROUTES_FAILURE,\n    error\n});\nexport const resetRoutes = () => ({\n    type: ActionType.RESET_ROUTES\n});\n// thunks to handle side effects of stop points change\nconst eventuallyUpdateRoutes = (actionCreator) => (...args) => async (dispatch, getState) => {\n    dispatch(actionCreator(...args));\n    const stops = getState()\n        .itinerary\n        .stops\n        .filter(hasValue);\n    if (stops.length >= 2) {\n        return dispatch(fetchRoutesFromAPI());\n    }\n};\nexport var InsertionPosition;\n(function (InsertionPosition) {\n    InsertionPosition[\"BEFORE\"] = \"BEFORE\";\n    InsertionPosition[\"AFTER\"] = \"AFTER\";\n})(InsertionPosition || (InsertionPosition = {}));\nexport const fetchRoutesFromAPI = () => async (dispatch, getState, API) => {\n    const { directions } = API;\n    dispatch(fetchRoutes());\n    try {\n        const { stops } = getState()\n            .itinerary;\n        const points = stops\n            .filter(hasValue)\n            .map(({ item }) => createSearchResultInstance(item).toPoint());\n        const res = await directions.search(points);\n        return dispatch(fetchRoutesWithSuccess(res));\n    }\n    catch (e) {\n        return dispatch(fetchRoutesWithFailure(e));\n    }\n};\nexport const moveItineraryPoint = (sourceId, targetId, position) => ({\n    type: ActionType.MOVE_ITINERARY_POINT,\n    sourceId,\n    targetId,\n    position\n});\nexport const addItineraryPointWithSideEffects = eventuallyUpdateRoutes(addItineraryPoint);\nexport const removeItineraryPointWithSideEffects = eventuallyUpdateRoutes(removeItineraryPoint);\nexport const changeItineraryPointWithSideEffects = eventuallyUpdateRoutes(updateItineraryPoint);\nexport const moveItineraryPointWithSideEffects = eventuallyUpdateRoutes(moveItineraryPoint);\n","import { ActionType } from '../common/actions';\nimport { InsertionPosition } from './actions';\nexport const defaultState = () => ({\n    stops: [{\n            id: 0,\n            item: null\n        }, {\n            id: 1,\n            item: null\n        }],\n    routes: [],\n    selectedRoute: 0\n});\nconst matchId = id => item => item.id === id;\nexport const reducer = (previousState = defaultState(), action) => {\n    switch (action.type) {\n        case ActionType.RESET_ROUTES: {\n            return Object.assign({}, defaultState());\n        }\n        case ActionType.FETCH_ROUTES_SUCCESS: {\n            const { routes } = action;\n            return Object.assign({}, previousState, {\n                routes,\n                selectedRoute: 0\n            });\n        }\n        case ActionType.SELECT_ROUTE: {\n            const { route } = action;\n            const { routes } = previousState;\n            return route >= 0 && route < routes.length ?\n                Object.assign({}, previousState, { selectedRoute: route }) :\n                previousState;\n        }\n        case ActionType.UPDATE_ITINERARY_POINT: {\n            const { id, location } = action;\n            return Object.assign({}, previousState, {\n                stops: previousState.stops.map(p => p.id !== id ? p : {\n                    id,\n                    item: Object.assign({}, p.item, location)\n                })\n            });\n        }\n        case ActionType.ADD_ITINERARY_POINT: {\n            const { beforeId, point } = action;\n            const newStops = [...previousState.stops];\n            const beforeIndex = newStops.findIndex(p => p.id === beforeId);\n            const insertIndex = beforeIndex >= 0 ? beforeIndex : newStops.length;\n            const id = newStops.reduce((acc, curr) => Math.max(curr.id, acc), -1) + 1;\n            const newPoint = { id, item: null };\n            if (point) {\n                newPoint.item = point;\n            }\n            newStops.splice(insertIndex, 0, newPoint);\n            return Object.assign({}, previousState, {\n                stops: newStops\n            });\n        }\n        case ActionType.MOVE_ITINERARY_POINT: {\n            const { stops } = previousState;\n            const newStops = [...stops];\n            const { sourceId, targetId, position } = action;\n            const sourceItem = newStops.find(matchId(sourceId));\n            const targetItem = newStops.find(matchId(targetId));\n            if (sourceItem && targetItem) {\n                const targetIndex = position === InsertionPosition.BEFORE ? newStops.indexOf(targetItem) : newStops.indexOf((targetItem)) + 1;\n                newStops.splice(targetIndex, 0, Object.assign({}, sourceItem));\n                const srcIndex = newStops.indexOf(sourceItem);\n                newStops.splice(srcIndex, 1);\n            }\n            return Object.assign(previousState, { stops: newStops });\n        }\n        case ActionType.REMOVE_ITINERARY_POINT: {\n            const { id } = action;\n            return Object.assign({}, previousState, {\n                stops: previousState.stops.reduce((prev, curr) => prev.concat(curr.id !== id ? [curr] : []), [])\n            });\n        }\n        case ActionType.GO_TO: {\n            const { location } = action;\n            return Object.assign({}, previousState, {\n                stops: [{\n                        id: 0,\n                        item: null\n                    }, {\n                        id: 1,\n                        item: location\n                    }],\n                routes: []\n            });\n        }\n        case ActionType.GO_FROM: {\n            const { location } = action;\n            return Object.assign({}, previousState, {\n                stops: [{\n                        id: 0,\n                        item: location\n                    }, {\n                        id: 1,\n                        item: null\n                    }],\n                routes: []\n            });\n        }\n        default:\n            return previousState;\n    }\n};\n","import { ActionType } from '../common/actions';\nexport const defaultState = () => ({\n    searchResult: [],\n    isSearching: false,\n    selectedSearchResult: null\n});\nexport const reducer = (previousState = defaultState(), action) => {\n    switch (action.type) {\n        case ActionType.FETCH_POINTS_OF_INTEREST_SUCCESS:\n            return Object.assign({}, previousState, {\n                searchResult: action.pointsOfInterest.map((s, i) => Object.assign(s, {\n                    id: i\n                })),\n                isSearching: false,\n                selectedSearchResult: null\n            });\n        case ActionType.FETCH_POINTS_OF_INTEREST:\n        case ActionType.FETCH_SEARCH_RESULT:\n        case ActionType.FETCH_CLOSEST: {\n            return Object.assign({}, previousState, {\n                searchResult: [],\n                isSearching: true,\n                selectedSearchResult: null\n            });\n        }\n        case ActionType.FETCH_CLOSEST_SUCCESS:\n        case ActionType.FETCH_SEARCH_RESULT_SUCCESS:\n            const { result: searchResult } = action;\n            const selectedSearchResult = searchResult.length === 1 ? searchResult[0] : null;\n            return Object.assign({}, previousState, {\n                searchResult,\n                isSearching: false,\n                selectedSearchResult\n            });\n        case ActionType.FETCH_CLOSEST_FAILURE:\n        case ActionType.FETCH_SEARCH_RESULT_FAILURE:\n            return Object.assign({}, previousState, { isSearching: false });\n        case ActionType.SELECT_SEARCH_RESULT:\n            return Object.assign({}, previousState, {\n                selectedSearchResult: action.searchResult\n            });\n        default:\n            return previousState;\n    }\n};\n","export default Object.freeze({\n    accessToken: '<@MAPBOX_PUBLIC_TOKEN@>',\n    style: '<@MAP_STYLE@>',\n    center: [-82.367408, 23.122419],\n    zoom: 12.4,\n    minZoom: 11,\n    doubleClickZoom: false,\n    logoPosition: 'bottom-right'\n});\n","import mapBoxConf from '../../conf/mapbox';\nimport { ActionType } from '../common/actions';\nexport const defaultState = () => ({\n    zoom: mapBoxConf.zoom,\n    center: mapBoxConf.center\n});\nexport const reducer = (previousState = defaultState(), action) => {\n    switch (action.type) {\n        case ActionType.UPDATE_MAP:\n            const { type, ...rest } = action;\n            return Object.assign({}, previousState, rest);\n        default:\n            return previousState;\n    }\n};\n","import { html } from 'lit-html';\n// codepen mit (todo search url)\nexport const loadingIndicator = () => html `<svg version=\"1.1\" width=\"100%\" height=\"100%\" id=\"loader-1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 40 40\" enable-background=\"new 0 0 40 40\" xml:space=\"preserve\">\n  <path opacity=\"0.2\" d=\"M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946\n    s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634\n    c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z\"></path>\n  <path d=\"M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0\n    C22.32,8.481,24.301,9.057,26.013,10.047z\">\n    </path>\n  </svg>`;\n// grommet\nexport const myLocation = () => html `\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n  <path fill=\"none\" stroke-width=\"2\" d=\"M5,19 C7.209139,19 9,17.209139 9,15 C9,12.790861 7.209139,11 5,11 C2.790861,11 1,12.790861 1,15 C1,17.209139 2.790861,19 5,19 Z M19,19 C21.209139,19 23,17.209139 23,15 C23,12.790861 21.209139,11 19,11 C16.790861,11 15,12.790861 15,15 C15,17.209139 16.790861,19 19,19 Z M5,6 L10,6 M19,15 L16,5 L13,5 M9,9 L5,15 L12,15 C12,12 14,9 17,9 L16,9 L9,9 Z M9,9 L7,6\"/>\n</svg>`;\nexport const pin = () => html `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 16\"><path fill-rule=\"evenodd\" d=\"M6 0C2.69 0 0 2.5 0 5.5 0 10.02 6 16 6 16s6-5.98 6-10.5C12 2.5 9.31 0 6 0zm0 14.55C4.14 12.52 1 8.44 1 5.5 1 3.02 3.25 1 6 1c1.34 0 2.61.48 3.56 1.36.92.86 1.44 1.97 1.44 3.14 0 2.94-3.14 7.02-5 9.05zM8 5.5c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z\"/></svg>`;\nexport const plus = () => html `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n  <path fill=\"none\" stroke-width=\"2\" d=\"M12,22 L12,2 M2,12 L22,12\"/>\n</svg>\n`;\nexport const remove = () => html `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 50 50\"><path d=\"M37.304 11.282l1.414 1.414-26.022 26.02-1.414-1.413z\"/><path d=\"M12.696 11.282l26.022 26.02-1.414 1.415-26.022-26.02z\"/></svg>`;\nexport const dragHandle = () => html `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n  <path fill=\"none\" stroke-width=\"2\" d=\"M15,5 L17,5 L17,3 L15,3 L15,5 Z M7,5 L9,5 L9,3 L7,3 L7,5 Z M15,13 L17,13 L17,11 L15,11 L15,13 Z M7,13 L9,13 L9,11 L7,11 L7,13 Z M15,21 L17,21 L17,19 L15,19 L15,21 Z M7,21 L9,21 L9,19 L7,19 L7,21 Z\"/>\n</svg>`;\nexport const swap = () => html `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M388.9 266.3c-5.1-5-5.2-13.3-.1-18.4L436 200H211c-7.2 0-13-5.8-13-13s5.8-13 13-13h224.9l-47.2-47.9c-5-5.1-5-13.3.1-18.4 5.1-5 13.3-5 18.4.1l69 70c1.1 1.2 2.1 2.5 2.7 4.1.7 1.6 1 3.3 1 5 0 3.4-1.3 6.6-3.7 9.1l-69 70c-5 5.2-13.2 5.3-18.3.3zM123.1 404.3c5.1-5 5.2-13.3.1-18.4L76.1 338H301c7.2 0 13-5.8 13-13s-5.8-13-13-13H76.1l47.2-47.9c5-5.1 5-13.3-.1-18.4-5.1-5-13.3-5-18.4.1l-69 70c-1.1 1.2-2.1 2.5-2.7 4.1-.7 1.6-1 3.3-1 5 0 3.4 1.3 6.6 3.7 9.1l69 70c5 5.2 13.2 5.3 18.3.3z\"/></svg>`;\n"],"names":["defaultState","reducer"],"mappings":"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"}